\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<>>=
options(scipen=10)
library(data.table)
#PLOT HEATMAP
par(bg = "white", las = 1, pty = "s")

errorType<-"MISMATCHES" #CHANGE THE ERROR TYPE HERE
shape<-"rectangles" #triangles|rectangles
alpha<-0.1

# if TRUE, inconclusive results (the ones with one blue and one red triangles)
# will have white rectangles
inconclusive_white=TRUE
# threhsold on fold-diff for coloring triangles (in absolute value)
threshold_triangle=1.06

#rectangles: 
#           color is based on difference of total means of motifs versus features
#
#triangles: 
#           upper left color is picked based on proportion of 0s
#           bottom right color is picked based on differerence of non-zero means of motifs versus controls

getVectorOfResults <- function(type,root_folder,extension) {
  filenames <- list.files(paste0(root_folder,type), pattern=extension, full.names=TRUE)
  list <- rbindlist(lapply(filenames,fread))
  dftmp <- as.data.frame(list[seq(2,nrow(list),2),2:ncol(list)])
  pvalues<-data.matrix(dftmp[,seq(6,ncol(dftmp),8)])
  
  #take mean across all control files
  dftmpVector<-c(type,as.vector(colMeans(data.matrix(dftmp))))
  #we want to use max p-value across all controls
  dftmpVector[seq(7,length(dftmpVector),8)]<-apply(dftmp[,seq(6,ncol(dftmp),8)],2,max,na.rm=TRUE)
  #compute signs from means (all data)
  dftmpVector[seq(6,length(dftmpVector),8)]<-sign(as.numeric(dftmpVector[seq(2,length(dftmpVector),8)])-as.numeric(dftmpVector[seq(3,length(dftmpVector),8)]))
  #compute fold-diff for nonZero_mean and nonZeros_perc and write it after the pvalue
  nonZeros_mean_foldchange=sign(as.numeric(dftmpVector[seq(4,length(dftmpVector),8)])-as.numeric(dftmpVector[seq(5,length(dftmpVector),8)]))*pmax(as.numeric(dftmpVector[seq(4,length(dftmpVector),8)]),as.numeric(dftmpVector[seq(5,length(dftmpVector),8)]))/pmin(as.numeric(dftmpVector[seq(4,length(dftmpVector),8)]),as.numeric(dftmpVector[seq(5,length(dftmpVector),8)]))
  nonZeros_perc_foldchange=sign(as.numeric(dftmpVector[seq(8,length(dftmpVector),8)])-as.numeric(dftmpVector[seq(9,length(dftmpVector),8)]))*pmax(as.numeric(dftmpVector[seq(8,length(dftmpVector),8)]),as.numeric(dftmpVector[seq(9,length(dftmpVector),8)]))/pmin(as.numeric(dftmpVector[seq(8,length(dftmpVector),8)]),as.numeric(dftmpVector[seq(9,length(dftmpVector),8)]))
  dftmpVector[seq(8,length(dftmpVector),8)]<-nonZeros_mean_foldchange
  dftmpVector[seq(9,length(dftmpVector),8)]<-nonZeros_perc_foldchange
  
  return(list(dataMatrix=dftmpVector,pvalues=pvalues))
}

root_folder<-"/Users/alice/Desktop/projects/kinetics/errors_will/52xAugust14/"
file_list <-
  c(
  paste(root_folder,"pacbio/pacbio_",errorType,".txt",sep=""),
  paste(root_folder,"illumina/illumina_",errorType,".txt",sep=""),
  paste(root_folder,"divergence/divergence_",errorType,".txt",sep=""),
  paste(root_folder,"diversity/diversity_",errorType,".txt",sep=""),
  paste(root_folder,"TCGA/TCGA_",errorType,".txt",sep="")
  )

extension<-paste0(errorType,".txt")
Pacbio <- getVectorOfResults("pacbio",root_folder,extension)
Illumina <- getVectorOfResults("illumina",root_folder,extension)
Divergence <- getVectorOfResults("divergence",root_folder,extension)
Diversity <- getVectorOfResults("diversity",root_folder,extension)
TCGA <- getVectorOfResults("TCGA",root_folder,extension)

dataPacBio<-Pacbio$dataMatrix
dataIllumina<-Illumina$dataMatrix
dataDivergence<-Divergence$dataMatrix
dataDiversity<-Diversity$dataMatrix
dataTCGA<-TCGA$dataMatrix

#NOTE THAT ORDER OF P-VALUES LISTED HERE IS RANDOM, NOT 1..10
print("Pacbio pvalues")
print(as.data.frame(Pacbio$pvalues))
print("Illumina pvalues")
print(as.data.frame(Illumina$pvalues))
print("Divergence pvalues")
print(as.data.frame(Divergence$pvalues))
print("Diversity pvalues")
print(as.data.frame(Diversity$pvalues))
print("TCGA pvalues")
print(as.data.frame(TCGA$pvalues))

header<-as.data.frame(read.table(paste0(root_folder,"header.txt"),header=FALSE,sep="\t"))

require(reshape2)
df<-t(melt(data.frame(dataPacBio,dataIllumina,dataDiversity,dataDivergence,dataTCGA)))
df<-rbind(header,df)

#dataset <- do.call("rbind",lapply(file_list,
#FUN=function(files){read.table(files,
#header=FALSE, sep="\t")}))
#interesting_rows<-c(1,2,seq(3,nrow(dataset),by=3))
#data<-dataset[interesting_rows,] #remove excessive headers

data<-df #NEW DATASET

par(xpd=TRUE)
motifs<-unique(as.character(unlist(data[1,])))
mfs<-c("APhasedRepeats", "DirectRepeats", "InvertedRepeats", "MirrorRepeats", "ZDNAMotifs", "GQuadPlus", "GQuadMinus")

#plot background canvas
barplot(
  c(0),
  c(0),
  xaxs = "i",
  yaxs = "i",
  col = colours()[1:6],
  ylim = c(0, 700),
  xlim = c(0, 700),
  bg = "white",
  axes = FALSE,sub=errorType
)

#plot labels
text(seq(50,700,100),730,labels=mfs,srt=90)
mtext(gsub( "_.*$", "", basename(file_list)), #infer method names from file names
      side = 2,
      at = seq(540, 140,-100))

#TODO: add control that headers here match headers from the other input
folddiff <- read.table(
        paste(root_folder,"folddif_",errorType,".txt",sep=""),
        row.names = 1,
        header = T,
        fill = TRUE
      )
# switch 1000G and Divergence
folddiff=folddiff[c(1,2,4,3,5),]


getColor <- function(significance, sign) {
  if (significance < 1e-5) {
    significance <- 1e-5
  }
  #significance[significance>alpha]=1 # threshold at 5%
  log_pvalue = -log10(significance)
  log_pvalue = sign * log_pvalue     # sign_difference -1 for negative differences, +1 for   positive differences
  colfunc = colorRampPalette(c("navy", "white", "red"))(n = 100 - 1)
  # 99 colors from blue to white to red.
  # Blue will correspond to log_pvalue=-5
  # white log_pvalue=0
  # red log_pvalue=5
  color_limits = seq (-5, 5, length.out = 100)
  col = c(colfunc[unlist(lapply(log_pvalue, function(log)
    which((log >= color_limits[1:99]) &
            (log <= color_limits[2:100])
    )[1]))])
  if (significance > alpha) {
    col <- "white" #non-significant not colored
  }
  return(col)
}

getParametersForTechnology <- function(technology) {
  print(technology[, 1])
  decimal_points <- 4
  columns<-8
  signs <- as.numeric(as.matrix(technology[seq(6, (7*columns)+1, columns)]))
  significance <- as.numeric(as.matrix(technology[seq(7, (7*columns)+1, columns)]))
  effect <-
    round(as.numeric(as.matrix(technology[seq(8, (7*columns)+1, columns)])), decimal_points)
  zeros <-
    round(as.numeric(as.matrix(technology[seq(9, (7*columns)+1, columns)])), decimal_points)
  
  mean_features <- as.numeric(as.matrix(technology[seq(2, (7*columns)+1, columns)]))
  mean_controls <- as.numeric(as.matrix(technology[seq(3, (7*columns)+1, columns)]))
  
  real_perc_diff <- round(as.numeric(mean_features-mean_controls)/mean_controls, decimal_points)
  
  print(paste(significance, effect, zeros))
  return(list(
    effect = effect,
    zeros = zeros,
    significance = significance,
    signs = signs,
    real_perc_diff = real_perc_diff
  ))
}

for (technology in seq(3, nrow(data), 1)) {
  print(technology)
  result = getParametersForTechnology(data[technology,])
  print(result)
  #print(paste(result$effect, result$col))
  
  i <- 1
  #print(x)
  for (x in seq(0, 699, 100)) {
    y <- 800 - (technology * 100) #skip header
    sizeToPlot <- 100
    
    backgroundColor1 <- "white"
    backgroundColor2 <- "white"
    
    cell_value<-as.numeric(folddiff[technology-2,i]) #fold differences from additional input
    
    if (!is.na(cell_value)) {
      cell_value<-round(cell_value,2)
      #  if (cell_value==0) {
      #    cell_value<-paste0("~",cell_value,"")
      #  } else {
      #    cell_value<-paste0(cell_value,"")
      #  }
    }
    if (!is.na(result$zeros[i])) {
      result$zeros[i]<-round(result$zeros[i],2)
      if(abs(result$zeros[i])<threshold_triangle)
        result$zeros[i]=0
    }
    if (!is.na(result$effect[i])) {
      result$effect[i]<-round(result$effect[i],2)
      if(abs(result$effect[i])<threshold_triangle)
        result$effect[i]=0
    }
    
    if (!is.na(result$significance[i])) {
      if (shape == "rectangles") {
        if(inconclusive_white){
          if(is.na((sign(result$zeros[i])*sign(result$effect[i])))){
            color=getColor(result$significance[i], sign(cell_value))
          }else{
            if(sign(result$zeros[i])*sign(result$effect[i])==-1){
              color='white'
            }else{
              color=getColor(result$significance[i], sign(cell_value))
            }
          }
        }else{
          color=getColor(result$significance[i], sign(cell_value))
        }
        polygon(
          c(x, x, x + (sizeToPlot), x + (sizeToPlot)),
          c(y, y + (sizeToPlot), y + (sizeToPlot), y),
          col = color,
          lty = 0
        )
      } else {
        if (shape == "triangles") {
          #upper left
          polygon(
            c(x, x, x + (sizeToPlot), x),
            c(y, y + (sizeToPlot), y + (sizeToPlot), y),
            col = getColor(result$significance[i], sign(result$zeros[i])),
            lty = 0
          )
          #bottom right
          polygon(
            c(x, x + (sizeToPlot), x + (sizeToPlot), x),
            c(y, y, y + (sizeToPlot), y),
            col = getColor(result$significance[i], sign(result$effect[i])),
            lty = 0
          )
        } else {
          warning("Shape type (rectangles|triangles) was not set. ERROR.")
        }
      }
      
      #PLOT LABELS INSIDE THE CELLS
      if (shape == "rectangles") {
        if(result$significance[i] <= alpha)
          if(inconclusive_white){
            if(is.na((sign(result$zeros[i])*sign(result$effect[i])))){
              text(
                x + 50,
                y + 50,
                labels = formatC(cell_value,2,format='f'),
                col = ifelse(result$significance[i] > alpha, "black", "white"),
                cex = 1.75
              )
            }else{
              if(sign(result$zeros[i])*sign(result$effect[i])!=-1){
                text(
                  x + 50,
                  y + 50,
                  labels = formatC(cell_value,2,format='f'),
                  col = ifelse(result$significance[i] > alpha, "black", "white"),
                  cex = 1.75
                )
              }
            }
          }else{
            text(
                  x + 50,
                  y + 50,
                  labels = formatC(cell_value,2,format='f'),
                  col = ifelse(result$significance[i] > alpha, "black", "white"),
                  cex = 1.75
                )
          }
          
      } else {
        if (shape == "triangles") {
          #upper left
          if(result$significance[i] <= alpha)
            text(
              x + 33,
              y + 70,
              labels = formatC(result$zeros[i],2,format='f'),
              col = ifelse(result$significance[i] > alpha, "black", "white")
            )
          #bottom right
          if(result$significance[i] <= alpha)
            text(
              x + 70,
              y + 33,
              labels = formatC(result$effect[i],2,format='f'),
              col = ifelse(result$significance[i] > alpha, "black", "white")
            )
        } else {
          warning("Shape type (rectangles|triangles) was not set. ERROR.")
        }
      }
    }
    
    
    i <- i + 1
  }
}
grid(7,7,col = "black", lty = 1)
@
